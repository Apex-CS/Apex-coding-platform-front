{"version":3,"sources":["hooks/useLocalStorage.js","components/Editor.js","components/Navbar.js","components/App.js","index.js"],"names":["PREFIX","window","location","href","split","useLocalStorage","key","initialValue","prefixedKey","value","setValue","useState","jsonValue","localStorage","getItem","JSON","parse","useEffect","setItem","stringify","CodeEditor","props","language","displayName","onChange","lineNumbers","funtion","theme","React","createElement","className","type","onClick","FontAwesomeIcon","icon","faPlay","faPlayCircle","includes","isConsole","ControlledEditor","onBeforeChange","editor","data","options","lineWrapping","lint","mode","matchBrackets","undefined","indentWithTabs","autocomplete","javaLanguage","extraKeys","smartIndent","autofocus","NavDark","Ref","useRef","timer","setTimer","startTimer","e","total","hours","minutes","seconds","Date","Math","floor","getTimeRemaining","clearTimer","current","clearInterval","id","setInterval","getDeadTime","deadline","setSeconds","getSeconds","Fragment","Navbar","fixed","bg","data-bs-theme","Container","Brand","alt","src","width","height","Nav","Item","Link","HOST","REST_ENDPOINT_RUN","pathSession","testCase","socket","SockJS","stompClient","Stomp","over","callPOST","async","endpoint","body","response","fetch","method","headers","jsonResponse","json","App","path","random","toString","substring","replace","redirect","apiResponse","setApiResponse","casesValue","setCasesValue","text","setText","java","initialState","setInitialState","python","code","setCode","inputValue","setInputValue","selectedOption","setSelectedOption","label","setSelectedOptions","onChangeUpdate","functionSet","quote","message","from","_transport","unloadRef","send","document","addEventListener","handleVisibilityChange","selection","getSelection","console","log","onChangeFunc","callRunAPI","btoa","session_id","case_id","input_values","then","result","hidden","timeout","setTimeout","clearTimeout","connect","subscribe","msg","chat","user_name","atob","loadTestCase","PanelGroup","autoSaveId","direction","Panel","minSize","defaultSizePercentage","Editor","PanelResizeHandle","langSelector","Select","defaultValue","colors","primary25","primary","ReactDOM","render","StrictMode","BrowserRouter","basename","getElementById"],"mappings":"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","file":"static/js/main.a5b2b45a.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\n\nconst pathSession = window.location.href.split('/')[3]\nconst testCase = window.location.href.split('/')[4]\nconst PREFIX = 'apex-code-challenge-' + pathSession +\"-\"+ testCase\n\nexport default function useLocalStorage(key, initialValue) {\n  const prefixedKey = PREFIX + key\n  const [value, setValue] = useState(() => {\n    const jsonValue = localStorage.getItem(prefixedKey)\n    if (jsonValue != null) return JSON.parse(jsonValue)\n\n    if (typeof initialValue === 'function') {\n      return initialValue()\n    } else {\n      return initialValue\n    }\n  })\n\n  useEffect(() => {\n    localStorage.setItem(prefixedKey, JSON.stringify(value))\n  }, [prefixedKey, value])\n\n  return [value, setValue]\n}\n","import React from 'react';\nimport 'codemirror/lib/codemirror.css'\nimport 'codemirror/theme/3024-night.css'\nimport 'codemirror/theme/dracula.css'\nimport 'codemirror/theme/material-darker.css'\nimport 'codemirror/mode/clike/clike'\nimport 'codemirror/mode/clike/clike'\nimport 'codemirror/mode/powershell/powershell'\nimport 'codemirror/mode/xml/xml'\nimport 'codemirror/mode/python/python'\nimport \"codemirror/addon/hint/show-hint\";\nimport \"codemirror/addon/hint/show-hint.css\";\nimport { Controlled as ControlledEditor } from 'react-codemirror2'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlay, faPlayCircle } from '@fortawesome/free-solid-svg-icons'\nimport {javaLanguage} from \"@codemirror/lang-java\"\n\n\n\nexport default function CodeEditor(props) {\n  \n  const {\n    language,\n    displayName,\n    value,\n    onChange,\n    lineNumbers,\n    funtion,\n    theme\n  } = props\n  \n\n  function handleChange(editor, data, value) {\n    if(displayName !== \"Console\"){\n      onChange(value)\n    }\n  }\n\n  function isConsole(funtion){\n   if(displayName === \"Console\"){\n      return(\n        <button\n          type=\"button\"\n          className=\"run-btn\"\n          onClick={() => funtion()}\n          > \n          <FontAwesomeIcon icon={faPlay} /> Run Code\n        </button>\n      )\n    }\n    else if(displayName === \"Test Cases\"){\n      return(\n        <button\n          type=\"button\"\n          className=\"run-btn\"\n          onClick={() => funtion()}\n          > \n          <FontAwesomeIcon icon={faPlayCircle} /> Run Test Cases\n        </button>\n      )\n    }\n    else if(displayName.includes(\"Main\")){\n      return(\n        funtion()\n      )\n    }\n  }\n  return (\n    <div className={\"editor-container\"}>\n      <div className=\"editor-title\">\n        {displayName}{isConsole(funtion)}\n      </div>\n      <ControlledEditor\n        onBeforeChange={handleChange}\n        value={value}\n        className=\"code-mirror-wrapper\"\n        options={{\n          lineWrapping: true,\n          lint: true,\n          mode: language,\n          matchBrackets: true,\n          theme: theme===undefined? \"default\":theme,\n          lineNumbers: lineNumbers,\n          indentWithTabs: true,\n          autocomplete: javaLanguage,\n          extraKeys: {\n            \"Ctrl-Space\": \"autocomplete\"\n          },\n          smartIndent: true,\n          autofocus: true,\n          \n        }}\n      />\n    </div>\n  )\n}\n\n","import React, { useState, useRef, useEffect } from \"react\";\nimport Container from 'react-bootstrap/Container';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction NavDark() {\n  const Ref = useRef(null);\n  const [timer, setTimer] = useState(\"00:00:00\");\n\n  const getTimeRemaining = (e) => {\n      const total = Date.parse(e) - Date.parse(new Date());\n      const seconds = Math.floor((total / 1000) % 60);\n      const minutes = Math.floor(\n          (total / 1000 / 60) % 60\n      );\n      const hours = Math.floor(\n          (total / 1000 / 60 / 60) % 24\n      );\n      return {\n          total,\n          hours,\n          minutes,\n          seconds,\n      };\n  };\n\n  const startTimer = (e) => {\n      let { total, hours, minutes, seconds } =\n          getTimeRemaining(e);\n      if (total >= 0) {\n          setTimer(\n              (hours > 9 ? hours : \"0\" + hours) +\n              \":\" +\n              (minutes > 9\n                  ? minutes\n                  : \"0\" + minutes) +\n              \":\" +\n              (seconds > 9 ? seconds : \"0\" + seconds)\n          );\n      }\n  };\n\n  const clearTimer = (e) => {\n      setTimer(\"00:30:00\");\n      if (Ref.current) clearInterval(Ref.current);\n      const id = setInterval(() => {\n          startTimer(e);\n      }, 1000);\n      Ref.current = id;\n  };\n\n  const getDeadTime = () => {\n      let deadline = new Date();\n      deadline.setSeconds(deadline.getSeconds() + 1800);\n      return deadline;\n  };\n  useEffect(() => {\n      clearTimer(getDeadTime());\n  }, []);\n\n  const onClickReset = () => {\n      clearTimer(getDeadTime());\n  };\n  \n  return (\n    <>\n      <Navbar fixed=\"top\" bg=\"dark\" data-bs-theme=\"dark\">\n        <Container>\n          <Navbar.Brand href=\"#home\">\n            <img\n              alt=\"\"\n              src=\"/img/logo.svg\"\n              width=\"30\"\n              height=\"30\"\n              className=\"d-inline-block align-top\"\n            />{' '}\n            APEX Code Platform\n          </Navbar.Brand>\n        </Container>\n        <Nav className=\"container-fluid\">\n          <Nav.Item className=\"ml-auto\">\n            <Nav.Link ><h5>Interviewer</h5></Nav.Link>\n          </Nav.Item>\n          <Nav.Item className=\"ml-auto\">\n            <Nav.Link ><h5>Name of Candidate for level</h5></Nav.Link>\n          </Nav.Item>\n          <Nav.Item className=\"ml-auto\">\n            <Nav.Link ><h4>{timer}</h4> </Nav.Link>\n          </Nav.Item>\n        </Nav>\n      </Navbar>\n    </>\n  );\n}\n//<Nav.Link ><h4>{timer} <button className=\"run-btn\" onClick={onClickReset}>Start</button></h4></Nav.Link>\nexport default NavDark;","import React, { useState, useEffect } from 'react';\nimport { Panel, PanelGroup, PanelResizeHandle } from \"react-resizable-panels\"\nimport { Stomp } from \"@stomp/stompjs\";\nimport SockJS from \"sockjs-client\";\nimport Select from 'react-select'\nimport useLocalStorage from '../hooks/useLocalStorage'\nimport Editor from './Editor'\nimport Navbar from './Navbar'\n\n\nconst HOST = 'https://afdevs.ddns.net';\n//const HOST = 'http://localhost:8080';\n\nvar REST_ENDPOINT_RUN = HOST + '/api/v1/java_code';\nvar REST_ENDPOINT_TEST_CASES = HOST + '/api/v1/java_test_cases';\nvar REST_ENDPOINT_LOAD = HOST + '/api/v1/load_case';\nconst WS_URL = HOST + '/ws-endpoint';\n\nconst pathSession = window.location.href.split('/')[3]\nconst testCase = window.location.href.split('/')[4]\nconst PREFIX = 'apex-code-challenge-' + pathSession +\"-\"+ testCase\n\nconst socket = new SockJS(WS_URL);\nconst stompClient = Stomp.over(socket);\n\nconst callPOST = async (endpoint, body, type) => {\n  const response = await fetch(endpoint, {\n    method: 'POST',\n    body: body,\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n  })\n  const jsonResponse = await response.json()\n  if(type === \"result\"){\n    return jsonResponse[\"result\"] + \" in \" + jsonResponse[\"duration\"] + \" ms\\n\\n\" + jsonResponse[\"output\"];\n  }\n  if(type === \"load\"){\n    return jsonResponse\n  }\n};\n\nfunction redirect(){\n  if(pathSession === \"\"){\n    let path = (Math.random() + 1).toString(36).substring(2);\n    window.location.replace(window.location.href+path);\n  }\n}\n\n\n\nfunction App() {\n  redirect();\n  const [apiResponse, setApiResponse] = useState(\"Run your code and see the result here\");\n  //const [inputValue, setInputValue] = useState(\"Put your input values here\");\n  const [casesValue, setCasesValue] = useState(\"See the cases results here\");\n  const [text, setText] = useLocalStorage('text', `See the code challenge here`)\n  const [java] = useLocalStorage('java', `public class Main {\n    public static void main (String[] args) {\n        System.out.print(\"Hello World from Java!\");\n    }\n  }`\n  )\n  const [initialState, setInitialState] = useLocalStorage('initialState', true)\n  const [python] = useLocalStorage('python',`print(\"Hello World from Python\")`)\n  const [code, setCode] = useLocalStorage('code', java)\n  const [inputValue, setInputValue] = useLocalStorage('input', \"Put your input values here\");\n  const [selectedOption, setSelectedOption] = useState({ label: 'Java 21', value: \"java\", displayName: 'Main.java', language: 'text/x-java' });\n  const options = [\n    { label: 'Java 21', value: \"java\", displayName: 'Main.java', language: 'text/x-java' },\n    { label: 'Python 3', value: \"python\", displayName: 'Main.py', language: 'python' }\n  ]\n\n  document.addEventListener('visibilitychange', handleVisibilityChange);\n  document.addEventListener('mouseleave', handleVisibilityChange);\n  document.addEventListener(\"copy\", handleCopyData);\n\n  function loadTestCase(){\n    if(testCase !== undefined && initialState){\n      let body = JSON.stringify({\n        session_id: pathSession,\n        case_id: testCase,\n        user_name: \"\"\n      })\n      setInitialState(false)\n      callPOST(REST_ENDPOINT_LOAD, body, \"load\").then(result => {\n        setCode(atob(result[\"code_starter\"]))\n        setText(atob(result[\"description\"]))\n        setInputValue(atob(result[\"input_values\"]))\n      });\n    }\n  }\n\n  function setSelectedOptions(value){\n    if(value.label === 'Java 21'){\n      REST_ENDPOINT_RUN = HOST + '/api/v1/java_code'\n      setCode(java)\n    } else if(value.label === 'Python 3'){\n      REST_ENDPOINT_RUN = HOST + '/api/v1/python_code'\n      setCode(python)\n    }\n    setSelectedOption(value)\n  }\n  \n  const langSelector = () => (\n    <Select \n      defaultValue={{ label: 'Java 21'}}\n      options={options} \n      onChange={setSelectedOptions}\n      theme={(theme) => ({\n        ...theme,\n        colors: {\n          primary25: 'silver',\n          primary: 'black',\n        },\n      })}\n    />\n  )\n\n  function connectWS() {\n    stompClient.connect({}, () => {\n      stompClient.subscribe('/topic/reply-'+ pathSession +\"-\"+ testCase, (msg) => {\n        let chat = JSON.parse(msg.body);\n        if(socket._transport.unloadRef !== chat.from){\n          if (chat.type === \"Code\"){\n            setCode(chat.message)\n          } else if (chat.type === \"Text\"){\n            setText(chat.message)\n          } else if (chat.type === \"Console\"){\n            setApiResponse(chat.message)\n          } else if (chat.type === \"Input\"){\n            setInputValue(chat.message)\n          } else if (chat.type === \"Test Cases\"){\n            setCasesValue(chat.message)\n          }\n        }\n      });\n    });\n  }\n\n  function onChangeUpdate(value, type, functionSet) {\n    var quote = {message: value, type: type, from: socket._transport.unloadRef};\n    stompClient.send(\"/topic/reply-\"+ pathSession +\"-\"+ testCase, {}, JSON.stringify(quote));\n    functionSet(value)\n  }\n\n  const onChangeFunc = (value, displayName, functionSet) => {\n    onChangeUpdate(value, displayName, functionSet)\n  };\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n    }, 250)\n    return () => clearTimeout(timeout)\n  }, [text, code])\n\n  function callRunAPI () {\n    let body = JSON.stringify({\n      code: btoa(JSON.parse(localStorage.getItem(PREFIX + \"code\"))),\n      session_id: pathSession,\n      case_id: testCase,\n      input_values: btoa(JSON.parse(localStorage.getItem(PREFIX + \"input\")))\n    })\n    callPOST(REST_ENDPOINT_RUN, body, \"result\").then(result => {\n      onChangeUpdate(result, \"Console\", setApiResponse)\n    });\n  }\n\n  function callTestCasesAPI () {\n    let body = JSON.stringify({\n      code: btoa(JSON.parse(localStorage.getItem(PREFIX + \"code\"))),\n      session_id: pathSession,\n      case_id: testCase,\n      input_values: btoa(JSON.parse(localStorage.getItem(PREFIX + \"input\")))\n    })\n    callPOST(REST_ENDPOINT_TEST_CASES, body, \"result\").then(result => {\n      onChangeUpdate(result, \"Test Cases\", setCasesValue)\n    });\n  }\n\n  function handleVisibilityChange() {\n    if (document.hidden) {\n        console.log('Candidate left the Tab');\n    } else {\n        console.log('Candidate came back the Tab');\n    }\n  };\n\n  function handleCopyData() {\n    const selection = document.getSelection();\n    console.log(selection.toString());\n  };\n\n  connectWS();\n  loadTestCase();\n\n  return (\n    <>\n    <Navbar />\n    <div className=\"pane top-pane\">\n      <PanelGroup autoSaveId=\"save\" direction=\"horizontal\">\n        <Panel className=\"pane top-pane\" minSize={10} defaultSizePercentage={50}>\n          <Editor\n              language=\"powershell\"\n              displayName=\"Text\"\n              lineNumbers={false}\n              value={text}\n              onChange={(e) => onChangeFunc(e, \"Text\", setText)}\n              theme=\"dracula\"\n            />\n        </Panel>\n        <PanelResizeHandle />\n        <Panel className=\"pane top-pane\" minSize={10}>\n          <Editor\n              language={selectedOption.language}\n              displayName={selectedOption.displayName}\n              lineNumbers={true}\n              value={code}\n              funtion={langSelector}\n              onChange={(e) => onChangeFunc(e, \"Code\", setCode)}\n              theme=\"material-darker\"\n            />\n        </Panel>\n        <PanelResizeHandle />\n        <Panel className={testCase !== undefined? \"\":\"pane top-pane\"} defaultSizePercentage={25} minSize={10}>\n          {testCase !== undefined? (\n            <>\n            <PanelGroup direction=\"vertical\">\n              <Panel className=\"pane \" minSize={10} defaultSizePercentage={33}>\n                <Editor\n                    language=\"powershell\"\n                    displayName=\"Console\"\n                    lineNumbers={false}\n                    funtion={callRunAPI}\n                    value={apiResponse}\n                    onChange={(e) => onChangeFunc(e, \"Console\", setApiResponse)}\n                    theme=\"3024-night\"\n                  />\n              </Panel>\n              <PanelResizeHandle className=\"resizer\"/>\n              <Panel className=\"pane vertical-pane\" minSize={10} defaultSizePercentage={33}>\n                <Editor\n                    language=\"powershell\"\n                    displayName=\"Input\"\n                    lineNumbers={false}\n                    value={inputValue}\n                    onChange={(e) => onChangeFunc(e, \"Input\", setInputValue)}\n                    theme=\"3024-night\"\n                  />\n              </Panel>\n              <PanelResizeHandle />\n              <Panel className=\"pane vertical-pane\" minSize={10} defaultSizePercentage={33}>\n                <Editor\n                    language=\"powershell\"\n                    displayName=\"Test Cases\"\n                    lineNumbers={false}\n                    value={casesValue}\n                    funtion={callTestCasesAPI}\n                    onChange={(e) => onChangeFunc(e, \"Test Cases\", setCasesValue)}\n                    theme=\"3024-night\"\n                  />\n              </Panel>\n            </PanelGroup>\n          </>\n          ):(\n            <>\n              <Editor\n                language=\"powershell\"\n                displayName=\"Console\"\n                lineNumbers={false}\n                funtion={callRunAPI}\n                value={apiResponse}\n                onChange={(e) => onChangeFunc(e, \"Console\", setApiResponse)}\n                theme=\"3024-night\"\n              />\n            </>\n          )}\n        </Panel>\n      </PanelGroup>\n    </div>\n    </>\n  )\n}\n\n\n\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename=\"/ApexCodingPlatform\">\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}